# # .github/workflows/azure-webapps-node.yml
name: Deploy NFT Generator to Azure Web Apps

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: nft-prompt-generator    # Set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'            # Set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '18.x'                      # Set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build --if-present

    - name: Run tests
      run: npm test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: node-app

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'Production'
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

---

# package.json
{
  "name": "nft-prompt-generator",
  "version": "1.0.0",
  "description": "NFT Generator for AI Prompt Engineering with Emoji-based NFTs",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "build": "echo 'Build completed'",
    "test": "echo 'No tests specified'"
  },
  "keywords": [
    "nft",
    "generator",
    "emoji",
    "prompt-engineering",
    "azure",
    "web3"
  ],
  "author": "Your Name",
  "license": "MIT",
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.0.0",
    "compression": "^1.7.4",
    "morgan": "^1.10.0",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  },
  "engines": {
    "node": "18.x",
    "npm": "9.x"
  }
}

---

# server.js
const express = require('express');
const path = require('path');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 8080;

// Security middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'", "https:"],
      fontSrc: ["'self'", "https:"],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'none'"],
    },
  },
}));

// Middleware
app.use(compression());
app.use(cors());
app.use(morgan('combined'));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Serve static files
app.use(express.static(path.join(__dirname, 'public')));

// API Routes
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version || '1.0.0'
  });
});

app.get('/api/stats', (req, res) => {
  // Mock statistics for the NFT generator
  res.json({
    totalNFTs: Math.floor(Math.random() * 1000) + 1200,
    activeTraders: Math.floor(Math.random() * 100) + 850,
    totalVolume: (Math.random() * 50 + 40).toFixed(2),
    avgPrice: (Math.random() * 0.1 + 0.05).toFixed(3)
  });
});

app.post('/api/generate-nft', (req, res) => {
  const { prompt, title } = req.body;
  
  if (!prompt || !prompt.trim()) {
    return res.status(400).json({ error: 'Prompt is required' });
  }

  // Simulate NFT generation
  const nftData = {
    id: Date.now(),
    prompt: prompt.trim(),
    title: title || `Prompt NFT #${Math.floor(Math.random() * 9999)}`,
    emoji: generateEmoji(prompt),
    price: (Math.random() * 0.1 + 0.02).toFixed(3),
    timestamp: new Date().toISOString()
  };

  res.json(nftData);
});

// Emoji generation function
function generateEmoji(prompt) {
  const emojiMap = {
    'art': 'üé®', 'creative': '‚ú®', 'design': 'üé≠', 'music': 'üéµ',
    'love': 'üíï', 'heart': '‚ù§Ô∏è', 'happy': 'üòä', 'joy': 'üéâ',
    'nature': 'üåø', 'tree': 'üå≥', 'flower': 'üå∏', 'ocean': 'üåä',
    'tech': 'üíª', 'robot': 'ü§ñ', 'rocket': 'üöÄ', 'science': 'üî¨',
    'food': 'üçï', 'coffee': '‚òï', 'travel': '‚úàÔ∏è', 'money': 'üí∞',
    'magic': 'ü™Ñ', 'space': 'üåå', 'fire': 'üî•', 'star': '‚≠ê'
  };
  
  const words = prompt.toLowerCase().split(/\s+/);
  let emojis = [];
  
  words.forEach(word => {
    for (const [key, emoji] of Object.entries(emojiMap)) {
      if (word.includes(key) || key.includes(word)) {
        emojis.push(emoji);
        break;
      }
    }
  });
  
  if (emojis.length === 0) {
    const defaultEmojis = ['üé≠', '‚ú®', 'üé®', 'üíé', 'üåü'];
    emojis = [defaultEmojis[Math.floor(Math.random() * defaultEmojis.length)]];
  }
  
  return emojis.slice(0, 3).join('');
}

// Serve the main HTML file
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Handle 404
app.use((req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

// Start server
app.listen(PORT, () => {
  console.log(`üöÄ NFT Generator server running on port ${PORT}`);
  console.log(`üåê Environment: ${process.env.NODE_ENV || 'development'}`);
});

---

# web.config
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <system.webServer>
    <webSocket enabled="false" />
    <handlers>
      <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
    </handlers>
    <rewrite>
      <rules>
        <rule name="DynamicContent">
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
          </conditions>
          <action type="Rewrite" url="server.js"/>
        </rule>
      </rules>
    </rewrite>
    <security>
      <requestFiltering>
        <requestLimits maxAllowedContentLength="1073741824" />
      </requestFiltering>
    </security>
    <httpErrors>
      <remove statusCode="404" subStatusCode="-1" />
      <error statusCode="404" prefixLanguageFilePath="" path="/404.html" responseMode="ExecuteURL" />
    </httpErrors>
  </system.webServer>
</configuration>

---

# .env.example
# Environment Variables Template
# Copy this file to .env and update with your actual values

# Server Configuration
PORT=8080
NODE_ENV=production

# Azure Configuration
AZURE_WEBAPP_NAME=nft-prompt-generator

# Database Configuration (if needed)
# DATABASE_URL=your_database_url_here

# API Keys (if needed)
# OPENSEA_API_KEY=your_opensea_api_key
# ETHEREUM_RPC_URL=your_ethereum_rpc_url

# Security
# JWT_SECRET=your_jwt_secret_here
# CORS_ORIGIN=https://your-domain.com

---

# .gitignore
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Build outputs
build/
dist/
public/build/

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# Azure
.azure/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

---

# public/404.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Page Not Found - NFT Generator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-align: center;
            padding: 50px;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }
        h1 { font-size: 4rem; margin-bottom: 20px; }
        p { font-size: 1.2rem; margin-bottom: 30px; }
        a { 
            color: #4ecdc4; 
            text-decoration: none; 
            padding: 12px 24px;
            border: 2px solid #4ecdc4;
            border-radius: 25px;
            transition: all 0.3s ease;
        }
        a:hover { 
            background: #4ecdc4; 
            color: white;
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <h1>404</h1>
    <p>Oops! The page you're looking for doesn't exist.</p>
    <a href="/">üè† Go Back Home</a>
</body>
</html> workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
